/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os

description = 'Ballerina - Choreo Extension - Ballerina Module'

configurations {
    nativeJar {
        transitive false
    }
    externalJars {
        transitive false
    }
    distribution {
        canBeConsumed true
        canBeResolved false
    }
}

dependencies {
    nativeJar project(':choreo-extension-native')

    externalJars "io.jaegertracing:jaeger-core:${jaegerVersion}"
    externalJars "io.opentelemetry:opentelemetry-sdk-common:${openTelemetryVersion}"
    externalJars "io.opentelemetry:opentelemetry-sdk-trace:${openTelemetryVersion}"
    externalJars "io.opentelemetry:opentelemetry-semconv:${openTelemetryAlphaVersion}"
    externalJars "io.opentelemetry:opentelemetry-api-metrics:${openTelemetryAlphaVersion}"
    externalJars "io.opentelemetry:opentelemetry-extension-trace-propagators:${openTelemetryVersion}"
    externalJars "io.grpc:grpc-protobuf:${grpcVersion}"
    externalJars "io.grpc:grpc-stub:${grpcVersion}"
    externalJars "io.grpc:grpc-netty-shaded:${grpcVersion}"
    externalJars "io.grpc:grpc-api:${grpcVersion}"
    externalJars "io.grpc:grpc-core:${grpcVersion}"
    externalJars "io.grpc:grpc-protobuf-lite:${grpcVersion}"
    externalJars "io.grpc:grpc-context:${grpcVersion}"
    externalJars "com.google.guava:guava:${guavaVersion}"
    externalJars "com.google.guava:failureaccess:${failureAccessVersion}"
    externalJars "com.google.protobuf:protobuf-java:${protobufVersion}"
    externalJars "io.perfmark:perfmark-api:${perfmarkVersion}"
}

clean {
    delete "${project.projectDir}/target"
    delete "${project.projectDir}/Ballerina.lock"
    delete "${project.projectDir}/ballerina-internal.log"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name, 'Implementation-Version': project.version)
    }
}

task unpackJballerinaTools(type: Copy, dependsOn: configurations.jbalTools) {
    configurations.jbalTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${buildDir}/extracted-distributions", "jballerina-tools-zip")
    }
}

task unpackStdLibs(dependsOn: configurations.ballerinaStdLibs) {
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${buildDir}/extracted-distributions", artifact.name + "-zip")
            }
        }
    }
}

task copyExternalJarsToLib(type: Copy) {
    into "${project.projectDir}/lib"
    from configurations.externalJars
}

task copyStdlibs(type: Copy) {
    dependsOn unpackJballerinaTools
    dependsOn unpackStdLibs

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    into "${project.buildDir}/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"

    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${buildDir}/extracted-distributions/" + artifact.name + "-zip"
        into("bre/lib") {
            from "${artifactExtractedPath}/libs"
        }
        into("docs") {
            from "${artifactExtractedPath}/docs"
        }
        into("repo/bala") {
            from "${artifactExtractedPath}/bala"
        }
        into("repo/cache") {
            from "${artifactExtractedPath}/cache"
        }
    }
}

def packageOrg = "ballerinax"
def packageName = "choreo"
def ballerinaConfigFile = new File("${project.projectDir}/Ballerina.toml")
def artifactBallerinaDocs = file("${project.projectDir}/build/docs_parent/")
def artifactCacheParent = file("${project.buildDir}/cache_parent/")
def artifactLibParent = file("${project.buildDir}/lib_parent/")
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaCentralAccessToken = System.getenv('BALLERINA_CENTRAL_ACCESS_TOKEN')
def originalConfig = ballerinaConfigFile.text
def artifactJar = file("$project.projectDir/target/cache/${packageOrg}/${packageName}/${tomlVersion}/java17/")
def platform = "java17"
def distributionBinPath = "${project.buildDir.absolutePath}/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}/bin"

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-');
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

task updateTomlVerions {
    doLast {
        def jaegerVersion = project.jaegerVersion
        def openTelemetryVersion = project.openTelemetryVersion
        def openTelemetryAlphaVersion = project.openTelemetryAlphaVersion
        def grpcVersion = project.grpcVersion
        def protobufVersion = project.protobufVersion
        def guavaVersion = project.guavaVersion
        def failureAccessVersion = project.failureAccessVersion
        def perfmarkVersion = project.perfmarkVersion

        def newConfig = ballerinaConfigFile.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        newConfig = newConfig.replace("@jaeger.version@", jaegerVersion)
        newConfig = newConfig.replace("@opentelemetry.version@", openTelemetryVersion)
        newConfig = newConfig.replace("@openTelemetryAlpha.version@", openTelemetryAlphaVersion)
        newConfig = newConfig.replace("@grpc.version@", grpcVersion)
        newConfig = newConfig.replace("@protobuf.version@", protobufVersion)
        newConfig = newConfig.replace("@guava.version@", guavaVersion)
        newConfig = newConfig.replace("@failureAccess.version@", failureAccessVersion)
        newConfig = newConfig.replace("@perfmark.version@", perfmarkVersion)
        ballerinaConfigFile.text = newConfig
    }
}

task revertTomlFile {
    doLast {
        ballerinaConfigFile.text = originalConfig
    }
}

task ballerinaBuild {
    dependsOn copyExternalJarsToLib
    dependsOn copyStdlibs
    dependsOn updateTomlVerions
    dependsOn configurations.nativeJar
    dependsOn configurations.externalJars
    dependsOn(":choreo-extension-ballerina:compileJava")
    dependsOn(":choreo-extension-ballerina:compileTestJava")
    dependsOn(":choreo-extension-ballerina:jar")
    dependsOn(":choreo-extension-ballerina:processResources")
    dependsOn(":choreo-extension-ballerina:test")
    dependsOn(":choreo-extension-ballerina:processTestResources")
    dependsOn(":choreo-extension-ballerina:checkstyleMain")
    dependsOn(":choreo-extension-ballerina:checkstyleTest")
    dependsOn(":choreo-extension-ballerina:spotbugsMain")
    dependsOn(":choreo-extension-ballerina:spotbugsTest")

    finalizedBy revertTomlFile
    finalizedBy ":commitTomlFiles"

    inputs.dir file(project.projectDir)
    doLast {
        def additionalBuildParams = ""
        if (project.hasProperty("debug")) {
            additionalBuildParams = "--debug ${project.findProperty("debug")}"
        }

        delete "${project.projectDir}/Dependencies.toml"
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "${distributionBinPath}/bal.bat pack --offline ${additionalBuildParams} && exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "${distributionBinPath}/bal pack --offline ${additionalBuildParams}"
            }
        }
        // extract bala file to artifact cache directory
        file("${project.projectDir}/target/bala").eachFileMatch(~/.*.bala/) { balaFile ->
            copy {
                from zipTree(balaFile)
                into file("$artifactCacheParent/bala/${packageOrg}/${packageName}/${tomlVersion}/${platform}")
            }
        }
        copy {
            from file("${project.projectDir}/target/cache")
            exclude '**/*-testable.jar'
            exclude '**/tests_cache/'
            into file("$artifactCacheParent/cache/")
        }

        // Doc creation and packing
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/bal.bat doc && exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/bal doc"
            }
        }
        copy {
            from file("$project.projectDir/target/apidocs/${packageName}")
            into file("$project.buildDir/docs_parent/docs/${packageName}")
        }
    }

    outputs.dir artifactCacheParent
    outputs.dir artifactBallerinaDocs
    outputs.dir artifactLibParent
    doNotTrackState("build needs to run every time")
}

task createArtifactZip(type: Zip) {
    destinationDirectory = file("${project.buildDir}/distributions")
    from ballerinaBuild
}

artifacts {
    distribution createArtifactZip
}

task ballerinaPublish {
    dependsOn updateTomlVerions
    dependsOn ballerinaBuild
    dependsOn ":${packageName}-extension-tests:test"

    finalizedBy(revertTomlFile)

    doLast {
        if (project.version.endsWith('-SNAPSHOT')) {
            return
        }
        if (ballerinaCentralAccessToken != null) {
            println("Publishing to the ballerina central...")
            exec {
                workingDir project.projectDir
                environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "$distributionBinPath/bal.bat push && exit %%ERRORLEVEL%%"
                } else {
                    commandLine 'sh', '-c', "$distributionBinPath/bal push"
                }
            }
        } else {
            throw new InvalidUserDataException("Central Access Token is not present")
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/${System.getenv("packagePublishRepo")}")
            credentials {
                username = System.getenv("packageUser")
                password = System.getenv("packagePAT")
            }
        }
    }
}

build {
    dependsOn ballerinaBuild
}

publish {
    dependsOn ballerinaPublish
}

task extractBallerinaClassFiles(type: Copy) {
    fileTree(artifactJar).forEach { file ->
        from zipTree(file).matching {
            exclude '**/tests/*'
            include '**/*.class'
        }
        into "${project.rootDir.absolutePath}/build/classes"
    }
}
