/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'checkstyle'
    id "com.github.spotbugs" version "5.0.14"
    id "net.researchgate.release" version "2.8.1"
    id "de.undercouch.download" version "5.4.0"
    id "jacoco"
}

allprojects {
    group = project.group
    version = project.version

    apply plugin: 'maven-publish'

    repositories {
        mavenLocal()
        mavenCentral()

        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/releases/'
        }
        maven {
            url = 'https://maven.wso2.org/nexus/content/groups/wso2-public/'
        }
        maven {
            url = 'https://repo.maven.apache.org/maven2'
        }
        maven {
            url 'https://maven.pkg.github.com/ballerina-platform/*'
            credentials {
                username System.getenv('packageUser')
                password System.getenv('packagePAT')
            }
        }
    }

    ext {
        snapshotVersion= '-SNAPSHOT'
        timestampedVersionRegex = '.*-\\d{8}-\\d{6}-\\w.*\$'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.spotbugs'

    configurations {
        jbalTools {
            transitive = false
        }
        ballerinaStdLibs
    }

    dependencies {
        // Ballerina Pack
        jbalTools "org.ballerinalang:jballerina-tools:${ballerinaLangVersion}"

        // Observe Modules
        ballerinaStdLibs "io.ballerina.stdlib:observe-ballerina:${observeVersion}"
        ballerinaStdLibs "io.ballerina:observe-ballerina:${observeInternalVersion}"

        // Standard Library Dependencies
        ballerinaStdLibs "io.ballerina.stdlib:regex-ballerina:${stdlibRegexVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:http-ballerina:${stdlibHttpVersion}"

        // Standard Library Transitive Dependencies
        ballerinaStdLibs "io.ballerina.stdlib:io-ballerina:${stdlibIoVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:os-ballerina:${stdlibOsVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:time-ballerina:${stdlibTimeVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:task-ballerina:${stdlibTaskVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:url-ballerina:${stdlibUrlVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:file-ballerina:${stdlibFileVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:crypto-ballerina:${stdlibCryptoVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:log-ballerina:${stdlibLogVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:constraint-ballerina:${stdlibConstraintVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:mime-ballerina:${stdlibMimeVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:cache-ballerina:${stdlibCacheVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:auth-ballerina:${stdlibAuthVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:jwt-ballerina:${stdlibJwtVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:oauth2-ballerina:${stdlibOAuth2Version}"
        ballerinaStdLibs "io.ballerina.stdlib:uuid-ballerina:${stdlibUuidVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:grpc-ballerina:${stdlibGrpcVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:random-ballerina:${stdlibRandomVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:protobuf-ballerina:${stdlibProtobufVersion}"
        ballerinaStdLibs "io.ballerina:protoc-tools:${protocToolVersion}"
    }

    checkstyle {
        toolVersion '10.12.1'
    }

    spotbugsMain {
        it.effort "max"
        it.reportLevel "low"
        it.reports {
            xml.enabled false
            html.enabled true
            text.enabled true
        }
        def excludeFile = file('spotbugs-exclude.xml')
        if (excludeFile.exists()) {
            it.excludeFilter = excludeFile
        }
    }

    spotbugsTest {
        it.effort "max"
        it.reportLevel "low"
        it.reports {
            xml.enabled false
            html.enabled true
            text.enabled true
        }
        def excludeFile = file('spotbugs-test-exclude.xml')
        if (excludeFile.exists()) {
            it.excludeFilter = excludeFile
        }
    }

    tasks.withType(Checkstyle) {
        dependsOn ":build-config:checkstyle:downloadFiles"
        configFile rootProject.file("build-config/checkstyle/build/checkstyle.xml")
        exclude '**/module-info.java'
        exclude '**/gen/**'
    }
}

def moduleVersion = project.version.replace("-SNAPSHOT", "")

release {
    failOnPublishNeeded = false
    failOnSnapshotDependencies = true

    buildTasks = ['build']
    versionPropertyFile = 'gradle.properties'
    tagTemplate = 'v$version'

    git {
        requireBranch = "release-${moduleVersion}"
        pushToRemote = 'origin'
    }
}

task build {
    dependsOn('choreo-extension-ballerina:build')
}

task codeCoverageReport(type: JacocoReport) {
    dependsOn('choreo-extension-ballerina:extractBallerinaClassFiles')
    dependsOn('choreo-extension-native:copyJavaClassFiles')

    executionData fileTree(project.rootDir.absolutePath).include("**/*.exec")
    additionalClassDirs files("${buildDir}/classes")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.required = true
        html.required = true
        xml.destination = new File("${buildDir}/reports/jacoco/report.xml")
        html.destination = new File("${buildDir}/reports/jacoco/report.html")
    }

    onlyIf = {
        true
    }
}

task commitTomlFiles {
    doLast {
        exec {
            def testDependenciesTomlFile = "choreo-extension-tests/src/test/resources/bal/**/Dependencies.toml"
            def balModuleDependenciesTomlFile = "choreo-extension-ballerina/Dependencies.toml"
            def dependenciesTomlFile = "${testDependenciesTomlFile} ${balModuleDependenciesTomlFile}"

            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git add ${dependenciesTomlFile} && git commit -m '[Automated] Update ballerina package versions' ${dependenciesTomlFile}"
            } else {
                commandLine 'sh', '-c', "git add ${dependenciesTomlFile} && git commit -m '[Automated] Update ballerina package versions' ${dependenciesTomlFile}"
            }
        }
    }
}
